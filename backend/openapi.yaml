openapi: 3.0.0
info:
  title: Food Ordering API
  description: API for managing users, food items, and orders.
  version: 1.1.0
servers:
  - url: http://localhost:5000
    description: Local Development Server

tags:
  - name: Auth
    description: User authentication and registration
  - name: Admin
    description: Admin functionalities for managing food and users
  - name: Orders
    description: User order management

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        201:
          description: Registration requested successfully
        400:
          description: User already exists

  /auth/login:
    post:
      tags: [Auth]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        200:
          description: Login successful
        401:
          description: Invalid credentials
        403:
          description: User not approved

  /admin/approve/{user_id}:
    post:
      tags: [Admin]
      summary: Approve a user registration
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User approved successfully
        404:
          description: User not found

  /admin/pending-registrations:
    get:
      tags: [Admin]
      summary: Get all pending registrations
      responses:
        200:
          description: List of pending users
        403:
          description: Access forbidden

  /admin/food:
    post:
      tags: [Admin]
      summary: Add a new food item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                quantity:
                  type: integer
                available_date:
                  type: integer
                  format: int64
                registration_closing:
                  type: integer
                  format: int64
      responses:
        201:
          description: Food item added successfully
        403:
          description: Access forbidden

    get:
      tags: [Admin]
      summary: Get all food items
      responses:
        200:
          description: List of all food items
        403:
          description: Access forbidden

  /admin/available-food:
    get:
      tags: [Admin]
      summary: Get all available food items
      responses:
        200:
          description: List of available food items
        403:
          description: Access forbidden

  /orders/order:
    post:
      tags: [Orders]
      summary: Place a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                food_id:
                  type: integer
                quantity:
                  type: integer
      responses:
        201:
          description: Order placed successfully
        400:
          description: Validation errors
        404:
          description: Food item not found

  /orders/order/{order_id}:
    delete:
      tags: [Orders]
      summary: Cancel an order
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Order canceled successfully
        404:
          description: Order not found
        400:
          description: Only pending orders can be canceled

  /orders:
    get:
      tags: [Orders]
      summary: Get all orders for the logged-in user
      responses:
        200:
          description: List of user orders

  /orders/all:
    get:
      tags: [Orders]
      summary: Get all orders (Paginated)
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
          description: The page number to retrieve
        - name: per_page
          in: query
          required: false
          schema:
            type: integer
          description: The number of orders per page (default 5)
      responses:
        200:
          description: List of all orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        user:
                          type: object
                          properties:
                            id:
                              type: integer
                            email:
                              type: string
                        food:
                          type: object
                          properties:
                            id:
                              type: integer
                            name:
                              type: string
                        quantity:
                          type: integer
                        status:
                          type: string
                        timestamp:
                          type: integer
                  total:
                    type: integer
                  page:
                    type: integer
                  pages:
                    type: integer

  /admin/orders/{order_id}:
    patch:
      tags: [Orders]
      summary: Update order status (Admin-only)
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, confirmed, completed, cancelled]
      responses:
        200:
          description: Order status updated successfully
        403:
          description: Access forbidden
        404:
          description: Order not found
        400:
          description: Invalid status
